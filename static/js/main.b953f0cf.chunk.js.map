{"version":3,"sources":["res/icons/search.svg","components/WeatherForecast.jsx","api/OWMDataService.jsx","components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherForecast","forecast","className","id","map","elem","key","date","toString","Date","split","high","low","getWeatherById","Promise","resolve","reject","$","ajax","type","url","AppData","app_id","cache","format","success","response","error","getWeatherByCity","city","getWeatherByLocation","lat","lon","MainPage","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","OWMDataService","then","console","log","updateWeatherState","catch","setState","loadDataList","dataList","cityList","JSON","parse","stringify","cityListJSON","options","forEach","name","document","addEventListener","event","getElementById","innerHTML","handleCitySearch","searchCity","weather","today","temperature","list","main","temp","country","detail","description","icon","src","dt_txt","temp_min","temp_max","weatherFetched","handleInputChange","setSearchText","target","value","text","searchText","handleFormSubmit","state","preventDefault","width","height","this","alt","onSubmit","searchImage","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","message"],"mappings":"8ukqBAAAA,EAAOC,QAAU,IAA0B,oC,8MCuB5BC,EArBS,SAACC,GAErB,OACI,oCACI,yBAAKC,UAAU,WAAWC,GAAG,YAErBF,EAASA,SAASG,KAAI,SAAAC,GAClB,OACI,yBAAKH,UAAU,QAAQI,IAAKD,EAAKE,KAAKC,YAClC,wBAAIN,UAAU,sBAAsB,IAAIO,KAAKJ,EAAKE,MAAMC,WAAWE,MAAM,KAAK,IAC9E,wBAAIR,UAAU,QAAQG,EAAKM,MAC3B,wBAAIT,UAAU,aAAaG,EAAKO,Y,uBC6CjD,M,sCApDXC,eAAiB,SAACV,GACd,OAAO,IAAIW,SAAQ,SAACC,EAASC,GACzBC,IAAEC,KAAK,CACHC,KAAM,MACNC,IAAI,uDAAD,OAAyDjB,EAAzD,+BAAkFkB,EAAQC,QAC7FC,OAAO,EACPC,OAAQ,OACRC,QAAS,SAACC,GACNX,EAAQW,IAEZC,MAAO,SAACA,GACJX,EAAOW,U,KAMvBC,iBAAmB,SAACC,GAChB,OAAO,IAAIf,SAAQ,SAACC,EAASC,GACzBC,IAAEC,KAAK,CACHC,KAAM,MACNC,IAAI,sDAAD,OAAwDS,EAAxD,+BAAmFR,EAAQC,QAC9FC,OAAO,EACPC,OAAQ,OACRC,QAAS,SAACC,GACNX,EAAQW,IAEZC,MAAO,SAACA,GACJX,EAAOW,U,KAMvBG,qBAAuB,SAACC,EAAKC,GACzB,OAAO,IAAIlB,SAAQ,SAACC,EAASC,GACzBC,IAAEC,KAAK,CACHC,KAAM,MACNC,IAAI,wDAAD,OAA0DW,EAA1D,gBAAqEC,EAArE,+BAA+FX,EAAQC,QAC1GC,OAAO,EACPC,OAAQ,OACRC,QAAS,SAACC,GACNX,EAAQW,IAEZC,MAAO,SAACA,GACJX,EAAOW,W,gBCoJZM,E,YA/LX,aAAe,IAAD,8BACV,+CAoBJC,kBAAoB,WACZC,UAAUC,YACVD,UAAUC,YAAYC,oBAClB,SAACC,GACG,IAAIP,EAAMO,EAASC,OAAOC,SACtBR,EAAMM,EAASC,OAAOE,UAE1BC,EAAeZ,qBAAqBC,EAAKC,GACpCW,MAAK,SAACjB,GACHkB,QAAQC,IAAInB,GACZ,EAAKoB,mBAAmBpB,MAE3BqB,OAAM,SAACpB,GACJ,EAAKqB,SAAS,CACVrB,MAAOA,UAO3Be,EAAe7B,eAAe,WAC7B8B,MAAK,SAACjB,GACH,EAAKoB,mBAAmBpB,MAE3BqB,OAAM,SAACpB,GACJ,EAAKqB,SAAS,CACVrB,MAAOA,QAhDT,EAsDdsB,aAAe,SAACC,GACZ,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUC,IAEvCC,EAAU,GACdL,EAASM,SAAQ,SAAA5B,GACb2B,GAAW,kBAAkB3B,EAAK6B,KAAK,UAE3CC,SAASC,iBAAiB,oBAAoB,SAASC,GACnDF,SAASG,eAAe,UAAUC,UAAYP,MA9DxC,EAkEdQ,iBAAmB,SAACC,GAChBvB,EAAed,iBAAiBqC,GAC3BtB,MAAK,SAACjB,GACH,EAAKoB,mBAAmBpB,MAE3BqB,OAAM,SAACpB,GACJ,EAAKqB,SAAS,CACVrB,MAAOA,QAzET,EA8EdmB,mBAAqB,SAACpB,GAClB,EAAKsB,SAAS,CACVkB,QAAS,CACLC,MAAO,CACHC,YAAa1C,EAAS2C,KAAK,GAAGC,KAAKC,KACnC1C,KAAM,CAACH,EAASG,KAAK6B,KAAO,KAAOhC,EAASG,KAAK2C,SACjDC,OAAQ/C,EAAS2C,KAAK,GAAGH,QAAQ,GAAGQ,YACpCC,KAAM,CACFC,IAAKlD,EAAS2C,KAAK,GAAGH,QAAQ,GAAGS,OAGzC1E,SAAU,CACN,CACI,KAAQyB,EAAS2C,KAAK,GAAGQ,OACzB,IAAOnD,EAAS2C,KAAK,GAAGC,KAAKQ,SAC7B,KAAQpD,EAAS2C,KAAK,GAAGC,KAAKS,UAElC,CACI,KAAQrD,EAAS2C,KAAK,IAAIQ,OAC1B,IAAOnD,EAAS2C,KAAK,IAAIC,KAAKQ,SAC9B,KAAQpD,EAAS2C,KAAK,IAAIC,KAAKS,UAEnC,CACI,KAAQrD,EAAS2C,KAAK,IAAIQ,OAC1B,IAAOnD,EAAS2C,KAAK,IAAIC,KAAKQ,SAC9B,KAAQpD,EAAS2C,KAAK,IAAIC,KAAKS,UAEnC,CACI,KAAQrD,EAAS2C,KAAK,IAAIQ,OAC1B,IAAOnD,EAAS2C,KAAK,IAAIC,KAAKQ,SAC9B,KAAQpD,EAAS2C,KAAK,IAAIC,KAAKS,UAEnC,CACI,KAAQrD,EAAS2C,KAAK,IAAIQ,OAC1B,IAAOnD,EAAS2C,KAAK,IAAIC,KAAKQ,SAC9B,KAAQpD,EAAS2C,KAAK,IAAIC,KAAKS,YAI3CC,gBAAgB,EAChBrD,MAAO,MAtHD,EA0HdsD,kBAAoB,SAACpB,GACjB,EAAKqB,cAAcrB,EAAMsB,OAAOC,QA3HtB,EA8HdF,cAAgB,SAAAG,GACZ,EAAKrC,SAAS,CACVsC,WAAYD,KAhIN,EAoIdE,iBAAmB,SAAC1B,GACc,KAA1B,EAAK2B,MAAMF,aACfzB,EAAM4B,iBACN,EAAKzB,iBAAiB,EAAKwB,MAAMF,YACjC,EAAKJ,cAAc,MAtInB,EAAKM,MAAQ,CACTtB,QAAS,CACLC,MAAO,CACHC,YAAa,GACbvC,KAAM,GACN4C,OAAQ,GACRE,KAAM,CACFC,IAAK,MACLc,MAAO,GACPC,OAAQ,KAGhB1F,SAAU,IAEdqF,WAAY,GACZN,gBAAgB,GAjBV,E,sEA4IV,OACI,oCACI,6BACA,6BACI,yBAAK9E,UAAU,mBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACV0F,KAAKJ,MAAMtB,QAAQC,MAAMC,YAD9B,OACgD,IAC5C,yBAAKlE,UAAU,MACV0F,KAAKJ,MAAMtB,QAAQC,MAAMM,OAC1B,yBAAKG,IAAK,mCAAmCgB,KAAKJ,MAAMtB,QAAQC,MAAMQ,KAAKC,IAAI,OAAQiB,IAAI,cAGnG,yBAAK3F,UAAU,YACV0F,KAAKJ,MAAMtB,QAAQC,MAAMtC,MAE9B,yBAAK3B,UAAU,cACX,0BAAM4F,SAAUF,KAAKL,kBACrB,yBAAKX,IAAKmB,IAAaF,IAAI,gBACvB,2BACI1E,KAAK,OACLkD,KAAK,SACLlE,GAAG,cACH6F,YAAa,sBACbZ,MAAOQ,KAAKJ,MAAMF,WAClBW,SAAUL,KAAKX,oBAEnB,4BAAQ9D,KAAK,UAAb,WAIJ,8BAAUhB,GAAG,cAMpByF,KAAKJ,MAAMR,gBAAmB,kBAAC,EAAD,CAAiB/E,SAAU2F,KAAKJ,MAAMtB,QAAQjE,WAEjF,yBAAKC,UAAU,cACP,yBAAKA,UAAU,aAAf,YAAoC,+CAIlD0F,KAAK3C,oB,GA3LAiD,IAAMC,W,MCWdC,MAXf,WACE,OACE,yBAAKlG,UAAU,OACb,gCACE,+CAAoB,gCAApB,IAA6B,0DAE/B,kBAAC,EAAD,QCAcmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASG,eAAe,SD6H3C,kBAAmB3B,WACrBA,UAAUyE,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEdhE,OAAM,SAAApB,GACLiB,QAAQjB,MAAMA,EAAMqF,c","file":"static/js/main.b953f0cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.64d25256.svg\";","import React from 'react'\n\nconst WeatherForecast = (forecast) => {\n\n    return (\n        <>\n            <div className='forecast' id='forecast'>\n                { \n                    forecast.forecast.map(elem => {\n                        return (\n                            <div className='block' key={elem.date.toString()}>\n                                <h3 className='secondary .weekday'>{new Date(elem.date).toString().split(' ')[0]}</h3>\n                                <h2 className='high'>{elem.high}</h2>\n                                <h4 className='secondary'>{elem.low}</h4>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\nexport default WeatherForecast","// import axios from 'axios'\nimport $ from 'jquery'\nimport AppData from '../config/AppData'\n\nclass OWMDataService {\n\n    getWeatherById = (id) => {\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: 'GET',\n                url: `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&APPID=${AppData.app_id}`,\n                cache: false,\n                format: 'json',\n                success: (response) => {\n                    resolve(response)\n                },\n                error: (error) => {\n                    reject(error)\n                }\n            })\n        })\n    }\n\n    getWeatherByCity = (city) => {\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: 'GET',\n                url: `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${AppData.app_id}`,\n                cache: false,\n                format: 'json',\n                success: (response) => {\n                    resolve(response)\n                },\n                error: (error) => {\n                    reject(error)\n                }\n            })\n        })\n    }\n\n    getWeatherByLocation = (lat, lon) => {\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: 'GET',\n                url: `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${AppData.app_id}`,\n                cache: false,\n                format: 'json',\n                success: (response) => {\n                    resolve(response)\n                } ,  \n                error: (error) => {\n                    reject(error)\n                }\n            })\n        })\n    }\n}\n\nexport default new OWMDataService()\n","import React from 'react'\nimport cityListJSON from '../config/city.list.min.json'\nimport WeatherForecast from './WeatherForecast'\nimport OWMDataService from '../api/OWMDataService'\nimport searchImage from '../res/icons/search.svg'\n\nclass MainPage extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            weather: {\n                today: {\n                    temperature: '',\n                    city: '',\n                    detail: '',\n                    icon: {\n                        src: '02d',\n                        width: '',\n                        height: ''\n                    }\n                },\n                forecast: []\n            },\n            searchText: '',\n            weatherFetched: false\n        }\n    }\n\n    componentDidMount = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    let lat = position.coords.latitude\n                    let lon = position.coords.longitude\n\n                    OWMDataService.getWeatherByLocation(lat, lon)\n                        .then((response) => {\n                            console.log(response)\n                            this.updateWeatherState(response)\n                        })\n                        .catch((error) => {\n                            this.setState({\n                                error: error\n                            })\n                        })\n                }\n            )\n        }\n        else {\n            OWMDataService.getWeatherById('4887398')\n            .then((response) => {\n                this.updateWeatherState(response)\n            })\n            .catch((error) => {\n                this.setState({\n                    error: error\n                })\n            })   \n        }\n    }\n\n    loadDataList = (dataList) => {\n        const cityList = JSON.parse(JSON.stringify(cityListJSON))\n    \n        let options = ''\n        cityList.forEach(city => {\n            options += '<option value=\"'+city.name+'\" />'\n        })\n        document.addEventListener(\"DOMContentLoaded\", function(event) { \n            document.getElementById(\"cities\").innerHTML = options\n        })\n    }\n\n    handleCitySearch = (searchCity) => {\n        OWMDataService.getWeatherByCity(searchCity)\n            .then((response) => {\n                this.updateWeatherState(response)\n            })\n            .catch((error) => {\n                this.setState({\n                    error: error\n                })\n            })\n    }\n\n    updateWeatherState = (response) => {\n        this.setState({\n            weather: {\n                today: {\n                    temperature: response.list[0].main.temp,\n                    city: [response.city.name + ', ' + response.city.country],\n                    detail: response.list[0].weather[0].description,\n                    icon: {\n                        src: response.list[0].weather[0].icon\n                    }\n                },\n                forecast: [\n                    {\n                        'date': response.list[8].dt_txt,\n                        'low': response.list[8].main.temp_min,\n                        'high': response.list[8].main.temp_max\n                    },\n                    {\n                        'date': response.list[16].dt_txt,\n                        'low': response.list[16].main.temp_min,\n                        'high': response.list[16].main.temp_max\n                    },\n                    {\n                        'date': response.list[24].dt_txt,\n                        'low': response.list[24].main.temp_min,\n                        'high': response.list[24].main.temp_max\n                    },\n                    {\n                        'date': response.list[32].dt_txt,\n                        'low': response.list[32].main.temp_min,\n                        'high': response.list[32].main.temp_max\n                    },\n                    {\n                        'date': response.list[39].dt_txt,\n                        'low': response.list[39].main.temp_min,\n                        'high': response.list[39].main.temp_max\n                    }\n                ]\n            },\n            weatherFetched: true,\n            error: ''\n        })\n    }\n\n    handleInputChange = (event) => {\n        this.setSearchText(event.target.value);\n    }\n\n    setSearchText = text => {\n        this.setState({\n            searchText: text\n        })\n    }\n\n    handleFormSubmit = (event) => {\n        if (this.state.searchText === '') return\n        event.preventDefault();\n        this.handleCitySearch(this.state.searchText);\n        this.setSearchText('');\n    }\n\n    render() {\n        return (\n            <>\n                <br/>\n                <div>\n                    <div className='renderedWeather'>\n                        <div className=\"todayWeather\">\n                            <div className='leftPanel'>\n                                <div className=\"tNow\">\n                                    {this.state.weather.today.temperature}&deg;{'C'}\n                                    <div className='hr'>\n                                        {this.state.weather.today.detail}\n                                        <img src={\"http://openweathermap.org/img/w/\"+this.state.weather.today.icon.src+\".png\"} alt=\"Weather\" />\n                                    </div>\n                                </div>\n                                <div className='cityName'>\n                                    {this.state.weather.today.city}\n                                </div>\n                                <div className=\"search-btn\">\n                                    <form onSubmit={this.handleFormSubmit}>\n                                    <img src={searchImage} alt='search icon' />\n                                        <input\n                                            type='text'\n                                            list=\"cities\"\n                                            id='city_search'\n                                            placeholder={'Select Another City'}\n                                            value={this.state.searchText}\n                                            onChange={this.handleInputChange}\n                                        />\n                                        <button type='submit'>\n                                            Search\n                                        </button>\n                                    </form>\n                                    <datalist id=\"cities\"> \n                                    </datalist>\n                                </div>\n                            </div>\n                        </div>\n                        {\n                            (this.state.weatherFetched) && <WeatherForecast forecast={this.state.weather.forecast}/>\n                        }\n                        <div className='rightPanel'>\n                                <div className='poweredBy'>Credits: <b>Abhinav Arya</b></div>\n                        </div>\n                    </div>\n                </div>\n                { this.loadDataList() }\n            </>\n        )\n    }\n}\n\nexport default MainPage","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage'\n// import { Navbar, Nav, NavDropdown, Form,  FormControl, Button, Table} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>The Weather App <b>-</b> <i>Powered by OpenWeatherMap</i></h3> \n      </header>\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}